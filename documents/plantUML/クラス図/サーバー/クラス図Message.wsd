@startuml
package Message{

    interface IMessage{
        +registe(message: string,user_id: string,room_id:string,options?: MessageOptions): Promise<SendMessageToClient>;
        +send(messge:string,user_id: string,room_id,options?:MessageOptions): Promise<void>;
        +get(message_id: string): Promise<IMessageEditor>;
    }

    interface IMessageRegister{
        +registe(): Promise<string>;
    }

    interface IMessageEditor{
        +message_id: string;
        +message: string;
        +user: IUserEditor;
        +room_id: string;
        +options?: Options;
        +created_at: Datetime;
        +edit(message: string): Promise<boolean>;
        +isEditable(message: IMessageEditor): Promise<boolean>;
        +delete(): Promise<boolean>;
    }

    abstract class Message{
        #messageEventEmitter: MessageEventEmitter;
        #repository: IMessageRepository;
        #MAX_MESSAGE_COUNT

        -add(message: string,user_id,room_id): Promise<string>;
        #registe(message: string,user_id: string,room_id: string,options?: MessageOptions): Promise<SendMessageToClient>;
        send(message: string,room_id: string,user_id: string,options?: MessageOptions): Promise<void>; (抽象メソッド)
        get(message_id: string): Promise<IMessageEditor>;
        delete(): void (未実装)
        edit(): void : (未実装)
        typing(user,room_id): void;
        latest(room_id: string): Promise<void>;
        more(room_id: string,message_id: string): Promise<void>;
    }

    class UserMessage{
        send(message: string,user_id:string,room_id: string,options?: MessageOptions);
    }

    class SystemMessage{
        send(message: string,user_id:string,room_id: string,options?: MessageOptions);
    }

    class Service{
        toClient(messages: IMessageEditor[]): SendMessageToClient[]
    }

    IMessage <|.. Message
    IMessageRegister <.. IMessage
    IMessageEditor <.. IMessage
    Message <|-- UserMessage
    Message <|-- SystemMessage




    
}


@enduml