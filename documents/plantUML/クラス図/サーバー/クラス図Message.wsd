@startuml
package Message{

    Interface IMessageRepository{
        +add(message: Message): void
        +delete(message_id: string): void
        +get(message_id: string): User
        +save(message: Message): void
        +all(room_id): Message[]
    }

    package message-core{
        class MessageRegister{
            repository: IMessageRepository
            message: string
            user: User
            room_id: string

            +constructor(message:string,user: User,room_id: string)
            +add(message: Message): void
        }

        class Message{
            repository: IMessageRepository
            message_id: string
            message: string
            user: User
            room_id: string

            +constructor(message: Message,repository: IMessageRepository)
            +delete(message_id: string): void
            +edit(message: Message): void
        }
    }

    class Messages{
        #repository: IMessageRepository
        +all() : Message[]
        +more(): Message[]
        +search(): Message[]
    }

    class MessageController{
        +add(message: Message): void
        +delete(message: Message): void
        +edit(message: Message): void
        +all(): Messages
        +typing(): void
    }

    class MessageRepositoryFactory{
        +create()
    }
    class MessageRepository
}

MessageRepository <.. MessageRepositoryFactory: <<create>>
Message <-- MessageController
Messages <-- MessageController
User <-- Message
IMessageRepository <.. Message
IMessageRepository <.. Messages
ReadConfig <-- MessageRepositoryFactory
IMessageRepository <|.. MessageRepository
RoomManager <-- MessageController

@enduml