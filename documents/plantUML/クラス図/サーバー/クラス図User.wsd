@startuml

package User{
    class Credentials{
        +email: string
        +password: string
    }

    class User{
        -id?: string
        -credentials: Credentials
        -name: string
        -created_at: Datetime
        -accessAbleRooms: array<string>
        -repository: IUserRepository
        -users: User[]
        +constructor(user: User)
        +registe(): void
        +isAccessable(room_id: string): boolean
        +isEditable(message: Message): boolean
        +trimCredentials(): void
    }

    Interface ILoginManager{
        +repository: IUserRepository
        +login(credentials: Credentials): boolean
        +logout(credentials: Credentials): boolean
        +authentiate(credentials: Credentials): boolean
    }

    class LoginManager{
        +users: Users[]
        +getLoginUsersCount(room_id: string): number
    }
    note right of LoginManager::users
        ユーザー情報をインメモリで保管するキュー
    endnote

    Interface IUserRepository{
        +registe(user: User): boolean
        +getUserByEmail(email: string): User
        +getUserByPassword(plainPassword: string): User
        +getUserByName(name: string): User
        +getUserByCredentials(credentials: Credentials): User
        +hasMessage(message: Message): boolean
    }

    class UserRepository

    class UserController{
        +registe(user: User): void
        +login(credentials: Credentials): void
        +logout(credentials: Credentials): void
        +authentiate(credentials: Credentials): void
    }

    class UserRepositoryFactory{
        +create()
    }

}

User <.. UserController
ILoginManager <|.. LoginManager
ILoginManager <.. UserController
IUserRepository <.. User
IUserRepository <.. LoginManager
ReadConfig <.. UserRepositoryFactory
IUserRepository <|.. UserRepository
UserRepository <.. UserRepositoryFactory : <<create>>
Credentials <.. UserRepository

@enduml