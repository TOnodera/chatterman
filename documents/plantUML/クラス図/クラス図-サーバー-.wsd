@startuml

package User{
    class Credentials{
        +email: string
        +password: string
    }

    class User{
        -id?: string
        -credentials: Credentials
        -name: string
        -created_at: Datetime
        -accessAbleRooms: array<string>
        -repository: IUserRepository
        +constructor(user: User)
        +registe(): void
        +isAbleToAccess(room_id: string): boolean
        +isEditable(message: Message): boolean
        +trimCredentials(): void
    }

    note right of User::id
        uuid
    endnote

    Interface ILoginManager{
        +repository: IUserRepository
        +login(credentials: Credentials): boolean
        +logout(credentials: Credentials): boolean
        +authentiate(credentials: Credentials): boolean
        +loginUsers(): number
    }

    class LoginManager

    Interface IUserRepository{
        +registe(user: User): boolean
        +getUserByEmail(email: string): User
        +getUserByPassword(plainPassword: string): User
        +getUserByname(name: string): User
        +getUsersCount(): number
    }

    class UserController{
        +registe(user: User): void
        +login(credentials: Credentials): void
        +logout(credentials: Credentials): void
        +authentiate(credentials: Credentials): void
    }

    class UserRepositoryFactory{
        +create()
    }

}

IUserRepository .. UserRepositoryFactory
User <-- UserController
ILoginManager <|.. LoginManager
LoginManager <-- UserController
UserRepositoryFactory <-- User
UserRepositoryFactory <-- LoginManager
ReadConfig <-- UserRepositoryFactory

package Message{

    Interface IMessageRepository{
        +add(message: Message): void
        +delete(message_id: string): void
        +get(message_id: string): User
        +save(message: Message): void
        +all(room_id): Message[]
    }

    class Message{
        #repository: IMessageRepository
        #message_id?: string
        #message: string
        #user: User
        #file?: File
        #room_id: string
        #counter: number
        +constructor(message: Message,repository: IMessageRepository)
        +delete(message_id: string): void
        +edit(message: Message): void
        +add(message: Message): void
    }

    class Messages{
        #repository: IMessageRepository
        +all() : Message[]
        +more(): Message[]
        +search(): Message[]
    }
    note right of Message::message_id
        uuid
    endnote

    class MessageContoroller{
        +add(message: Message): void
        +delete(message: Message): void
        +edit(message: Message): void
        +all(): Messages
        +typing(): void
    }

    class MessageRepositryFactory{
        +create()
    }
}


class ReadConfig{
    +config()
}

IMessageRepository .. Message
Message <-- MessageContoroller
Message --* Messages
Messages <-- MessageContoroller
User <-- Message
Credentials <-- LoginManager
MessageRepositryFactory <-- Message
MessageRepositryFactory <-- Messages
ReadConfig <-- MessageRepositryFactory

@enduml