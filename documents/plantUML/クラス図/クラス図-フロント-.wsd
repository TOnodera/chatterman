@startuml

package Mesage{

    class Message{
        -store: Map<string,string[]>
        +send(message: string,me: User,room_id:string = 'everybody')
    }

    class Subject{
        +notifyObserver()
        +addAcceptMessageHandler(func: Function)
        +addTypingEventHandler(func: Function)
        +acceptMessageNotify(room_id: string)
        +typingEventNotify(user: User)
    }

    class Observer{
        +acceptMessageListener()
        +changeRoomListener(room_id: string)
        +typingEventListener()
    }

    class AcceptMessageSubject{
        +notify(room_id: string);
    }

    class AcceptMessageObserver{
        +{static} handler: Function
        +{static} update()
    }
    note right of AcceptMessageObserver::handler
    handlerをupdate()で呼び出す
    end note

    class TypingEventSubject{
        +notify(room_id: string);
    }

    class TypingEventObserver{
        +{static} handler: Function
        +{static} update()
    }
    note right of AcceptMessageObserver::handler
    handlerをupdate()で呼び出す
    end note

    AcceptMessageObserver <.. AcceptMessageSubject
    TypingEventObserver <.. TypingEventSubject

}



class Me{
    user: User,
    credentials: Credentials,
    isLogin: boolean
}

class User{
    id: string,
    name: string
}

class Credentials{
    email: string,
    password: string
}

class UserRegisteInfo {
    name: string,
    credentials: Credentials
}

class Exception{
    message?: string,
    status?: number
}



@enduml